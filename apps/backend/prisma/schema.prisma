generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model audit_trail {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String?   @db.Uuid
  action      String    @db.VarChar(255)
  entity_type String    @db.VarChar(100)
  entity_id   String?   @db.Uuid
  details     Json?
  timestamp   DateTime? @default(now()) @db.Timestamptz(6)
  users       users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model customers {
  id                                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                               String    @unique @db.Uuid
  company_name_en                       String    @db.VarChar(255)
  company_name_th                       String    @db.VarChar(255)
  legal_entity_id                       String    @unique @db.VarChar(100)
  company_description                   String?
  company_address_line1                 String    @db.VarChar(255)
  company_province                      String    @db.VarChar(100)
  company_district                      String    @db.VarChar(100)
  company_sub_district                  String    @db.VarChar(100)
  company_zip_code                      String    @db.VarChar(20)
  company_phone                         String    @db.VarChar(50)
  company_fax                           String?   @db.VarChar(50)
  company_registration_attachments_ids  Json?
  operator_id_card                      String    @unique @db.VarChar(100)
  operator_prefix                       String    @db.VarChar(50)
  operator_first_name                   String    @db.VarChar(255)
  operator_last_name                    String    @db.VarChar(255)
  operator_mobile_phone                 String    @db.VarChar(50)
  operator_phone                        String?   @db.VarChar(50)
  operator_id_card_attachments_ids      Json?
  receipt_address_building_floor_number String    @db.VarChar(255)
  receipt_province                      String    @db.VarChar(100)
  receipt_district                      String    @db.VarChar(100)
  receipt_sub_district                  String    @db.VarChar(100)
  receipt_zip_code                      String    @db.VarChar(20)
  receipt_phone                         String    @db.VarChar(50)
  receipt_fax                           String?   @db.VarChar(50)
  created_at                            DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                            DateTime? @default(now()) @db.Timestamptz(6)
  users                                 users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model document_attachments {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  file_name      String    @db.VarChar(255)
  file_url       String
  mime_type      String?   @db.VarChar(100)
  entity_type    String    @db.VarChar(100)
  entity_id      String    @db.Uuid
  uploaded_by_id String?   @db.Uuid
  uploaded_at    DateTime? @default(now()) @db.Timestamptz(6)
  users          users?    @relation(fields: [uploaded_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model invoice_line_items {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoice_id  String    @db.Uuid
  description String
  quantity    Int
  unit_price  Decimal   @db.Decimal(12, 2)
  line_total  Decimal   @db.Decimal(12, 2)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  invoices    invoices  @relation(fields: [invoice_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model invoices {
  id                          String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoice_no                  String               @unique @db.VarChar(255)
  test_request_id             String               @db.Uuid
  customer_id                 String               @db.Uuid
  invoice_date                DateTime             @default(dbgenerated("CURRENT_DATE")) @db.Date
  due_date                    DateTime?            @db.Date
  lab_tax_info                Json?
  sub_total                   Decimal              @db.Decimal(12, 2)
  tax_rate                    Decimal              @default(0.07) @db.Decimal(5, 2)
  tax_amount                  Decimal              @db.Decimal(12, 2)
  net_total                   Decimal              @db.Decimal(12, 2)
  payment_status              String               @default("pending") @db.VarChar(50)
  payment_slip_attachment_url String?
  issued_by_id                String?              @db.Uuid
  created_at                  DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at                  DateTime?            @default(now()) @db.Timestamptz(6)
  invoice_line_items          invoice_line_items[]
  users                       users?               @relation(fields: [issued_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  test_requests               test_requests        @relation(fields: [test_request_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model lab_results {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lab_test_id     String    @db.Uuid
  parameter       String?   @db.VarChar(255)
  value           String?
  unit            String?   @db.VarChar(50)
  reference_range String?
  is_abnormal     Boolean?  @default(false)
  notes           String?
  recorded_by_id  String?   @db.Uuid
  recorded_at     DateTime? @default(now()) @db.Timestamptz(6)
  lab_tests       lab_tests @relation(fields: [lab_test_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users?    @relation(fields: [recorded_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model lab_tests {
  id                         String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  test_request_sample_id     String               @db.Uuid
  case_no                    String?              @unique @db.VarChar(255)
  case_date                  DateTime?            @db.Date
  assigned_lab_technician_id String?              @db.Uuid
  test_panel                 String?              @db.VarChar(255)
  test_method                String?              @db.VarChar(255)
  lab_result_status          String               @default("pending") @db.VarChar(50)
  notes                      String?
  created_at                 DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime?            @default(now()) @db.Timestamptz(6)
  lab_results                lab_results[]
  users                      users?               @relation(fields: [assigned_lab_technician_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  test_request_samples       test_request_samples @relation(fields: [test_request_sample_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model projects {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String          @unique @db.VarChar(255)
  description   String?
  created_by_id String?         @db.Uuid
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?       @default(now()) @db.Timestamptz(6)
  users         users?          @relation(fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  test_requests test_requests[]
}

model storage_locations {
  id                      String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                    String                 @db.VarChar(255)
  type                    String                 @db.VarChar(50)
  parent_id               String?                @db.Uuid
  capacity                Int?
  current_occupancy       Int?                   @default(0)
  description             String?
  created_at              DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at              DateTime?              @default(now()) @db.Timestamptz(6)
  storage_locations       storage_locations?     @relation("storage_locationsTostorage_locations", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_storage_locations storage_locations[]    @relation("storage_locationsTostorage_locations")
  test_request_samples    test_request_samples[]
}

model test_request_samples {
  id                  String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  test_request_id     String             @db.Uuid
  customer_sample_id  String             @db.VarChar(255)
  sent_sample_date    DateTime?          @db.Date
  animal_type         String?            @db.VarChar(100)
  sample_specimen     String?            @db.VarChar(100)
  panel               String?            @db.VarChar(255)
  method              String?            @db.VarChar(255)
  requested_qty       Decimal            @db.Decimal(10, 3)
  received_qty        Decimal?           @db.Decimal(10, 3)
  unit                String?            @db.VarChar(50)
  current_status      String             @default("received") @db.VarChar(50)
  storage_location_id String?            @db.Uuid
  notes               String?
  created_at          DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?          @default(now()) @db.Timestamptz(6)
  lab_tests           lab_tests[]
  storage_locations   storage_locations? @relation(fields: [storage_location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  test_requests       test_requests      @relation(fields: [test_request_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([test_request_id, customer_sample_id])
}

model test_requests {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  request_no           String                 @unique @db.VarChar(255)
  customer_id          String                 @db.Uuid
  requester_name       String                 @db.VarChar(255)
  objective            String?
  request_date         DateTime               @default(dbgenerated("CURRENT_DATE")) @db.Date
  document_status      String                 @default("submitted") @db.VarChar(50)
  lab_internal_status  String                 @default("waiting_approval_lab") @db.VarChar(50)
  project_id           String?                @db.Uuid
  notes                String?
  created_at           DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?              @default(now()) @db.Timestamptz(6)
  invoices             invoices[]
  test_request_samples test_request_samples[]
  projects             projects?              @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                String                 @unique @db.VarChar(255)
  password_hash        String                 @db.VarChar(255)
  role                 String                 @db.VarChar(50)
  is_email_confirmed   Boolean?               @default(false)
  created_at           DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?              @default(now()) @db.Timestamptz(6)
  audit_trail          audit_trail[]
  customers            customers?
  document_attachments document_attachments[]
  invoices             invoices[]
  lab_results          lab_results[]
  lab_tests            lab_tests[]
  projects             projects[]
}
